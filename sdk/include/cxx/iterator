////
// FeOS C++ Standard Library
// iterator
//     STL iterators
//

#pragma once
#include <stddef.h>

namespace std
{
	// Dummy iterator types
	struct input_iterator_tag {};
	struct output_iterator_tag {};
	struct forward_iterator_tag {};
	struct bidirectional_iterator_tag {};
	struct random_access_iterator_tag {};

	///////////////////////////////////////////////////////////////////////////
	// Iterator traits
	///////////////////////////////////////////////////////////////////////////

	template <class Iter>
	struct iterator_traits
	{
		typedef typename Iter::difference_type difference_type;
		typedef typename Iter::value_type value_type;
		typedef typename Iter::pointer pointer;
		typedef typename Iter::reference reference;
		typedef typename Iter::iterator_category iterator_category;
	};

	// Default iterator traits
	template <class T>
	struct iterator_traits<const T*>
	{
		typedef ptrdiff_t difference_type;
		typedef T value_type;
		typedef const T* pointer;
		typedef const T& reference;
		typedef random_access_iterator_tag iterator_category;
	};
	template <class T>
	struct iterator_traits<T*>
	{
		typedef ptrdiff_t difference_type;
		typedef T value_type;
		typedef T* pointer;
		typedef T& reference;
		typedef random_access_iterator_tag iterator_category;
	};

	///////////////////////////////////////////////////////////////////////////
	// Base iterator class for automatically exposing iterator traits
	///////////////////////////////////////////////////////////////////////////

	template <class ItCat, class TVal, class TDiff = ptrdiff_t, class TPtr = TVal*, class TRef = TVal&>
	struct iterator
	{
		typedef TDiff difference_type;
		typedef TVal value_type;
		typedef TPtr pointer;
		typedef TRef reference;
		typedef ItCat iterator_category;
	};

	///////////////////////////////////////////////////////////////////////////
	// Reverse iterator
	///////////////////////////////////////////////////////////////////////////

	template <class Iter>
	class reverse_iterator
	{
		Iter mIter;
		typedef reverse_iterator<Iter> _Self;
	public:
		typedef typename iterator_traits<Iter>::difference_type difference_type;
		typedef typename iterator_traits<Iter>::value_type value_type;
		typedef typename iterator_traits<Iter>::pointer pointer;
		typedef typename iterator_traits<Iter>::reference reference;
		typedef typename iterator_traits<Iter>::iterator_category iterator_category;
		typedef Iter iterator_type;

		inline reverse_iterator() : mIter() {}
		inline explicit reverse_iterator(Iter iter) : mIter(iter) {}
		inline Iter base() const { return mIter; }

		inline bool operator ==(const reverse_iterator& iter) const { return mIter == iter.mIter; }
		inline bool operator !=(const reverse_iterator& iter) const { return mIter != iter.mIter; }
		inline reference operator *() const { Iter temp(mIter); return *--temp; }
		inline pointer operator ->() const { Iter temp(mIter); return (--temp).operator ->(); }
		inline reverse_iterator& operator ++() { --mIter; return *this; }
		inline reverse_iterator  operator ++(int) { _Self temp(*this); mIter--; return temp; }
		inline reverse_iterator& operator --() { ++mIter; return *this; }
		inline reverse_iterator  operator --(int) { _Self temp(*this); mIter++; return temp; }
		inline _Self operator +(difference_type a) const { return _Self(mIter - a); }
		inline _Self operator -(difference_type a) const { return _Self(mIter + a); }
		inline _Self& operator +=(difference_type a) { mIter -= a; return *this; }
		inline _Self& operator -=(difference_type a) { mIter += a; return *this; }
		//inline reference operator [](difference_type a) const { *(*this + a); }
		inline reference operator [](difference_type a) const { return mIter[-a]; }
	};
}
