////
// FeOS C++ Standard Library
// utility
//     Misc utilities
//

#pragma once

namespace std
{
	template <class T1, class T2>
	struct pair
	{
		typedef T1 first_type;
		typedef T2 second_type;

		T1 first;
		T2 second;

		pair() : first(T1()), second(T2()) {}
		pair(const T1& x, const T2& y) : first(x), second(y) {}
		template <class _T1, class _T2> pair(const pair<_T1, _T2>& p) : first(p.first), second(p.second) { }
	};

	template <class T1,class T2>
	pair<T1, T2> make_pair(T1 x, T2 y)
	{
		return pair<T1, T2>(x, y);
	}

	namespace rel_ops
	{
		template <class T> bool operator !=(const T& x, const T& y) { return !(x == y); }
		template <class T> bool operator > (const T& x, const T& y) { return y < x; }
		template <class T> bool operator <=(const T& x, const T& y) { return !(y < x); }
		template <class T> bool operator >=(const T& x, const T& y) { return !(x < y); }
	}
}
