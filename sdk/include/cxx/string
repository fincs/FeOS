////
// FeOS C++ Standard Library
// string
//     String library
//

#pragma once
#include <string.h>
#include <iterator>

#ifdef BUILD_FEOSSTL
#pragma GCC visibility push(default)
#endif

namespace std
{
	class string
	{
		char* mBuf;
		size_t mSize;

		inline void _alloc_mem()
		{
			mBuf = new char[mSize];
		}

		inline void _alloc_mem(size_t s)
		{
			mBuf = new char[mSize = s];
		}

		inline void _free_mem()
		{
			delete [] mBuf;
		}

	public:

		static const size_t npos = -1;
		typedef char* iterator;
		typedef const char* const_iterator;
		typedef std::reverse_iterator<char*> reverse_iterator;
		typedef std::reverse_iterator<const char*> const_reverse_iterator;

		///////////////////////////////////////////////////////////////////////
		// Constructors and destructors
		///////////////////////////////////////////////////////////////////////

		string();
		string(size_t size); // NON-STANDARD/internal use only
		string(const string& str);
		string(const string& str, size_t pos, size_t n = npos);
		string(const char* str);
		string(const char* str, size_t n);
		string(size_t n, char c);

		~string();

		///////////////////////////////////////////////////////////////////////
		// Operators
		///////////////////////////////////////////////////////////////////////

		inline const char& operator [](size_t pos) const { return mBuf[pos]; }
		inline char& operator [](size_t pos) { return mBuf[pos]; }

		inline string& operator =(const string& str) { return assign(str); }
		inline string& operator =(const char* str)   { return assign(str); }
		string& operator =(char c);

		inline string& operator +=(const char* str)   { return append(str); }
		inline string& operator +=(const string& str) { return append(str); }
		string& operator +=(char c);

		///////////////////////////////////////////////////////////////////////
		// Functions
		///////////////////////////////////////////////////////////////////////

		inline string& append(const string& str) { return append(str.mBuf); }
		string& append(const char* str);
		string& append(const string& str, size_t pos, size_t n);
		string& append(const char* s, size_t n);
		string& append(size_t n, char c);

		string& assign(const string& str);
		string& assign(const char* str);
		string& assign(const string& str, size_t pos, size_t n);
		string& assign(const char* s, size_t n);
		string& assign(size_t n, char c);

		// TODO: throw out_of_range exception
		inline const char& at(size_t pos) const { return mBuf[pos]; }
		inline char& at(size_t pos) { return mBuf[pos]; }

		inline iterator begin() { return iterator(mBuf); }
		inline const_iterator begin() const { return const_iterator(mBuf); }

		inline size_t capacity() const { return mSize; }

		inline void clear() { *mBuf = '\0'; }

		inline int compare(const string& str) const { return compare(str.mBuf); }
		inline int compare(const char* str) const { return strcmp(mBuf, str); }

		// TODO: implement these (don't forget to throw out_of_range exception!)
		// int compare(size_t pos1, size_t n1, const string& str) const;
		// int compare(size_t pos1, size_t n1, const char* s) const;
		// int compare(size_t pos1, size_t n1, const string& str, size_t pos2, size_t n2) const;
		// int compare(size_t pos1, size_t n1, const char* s, size_t n2) const;

		size_t copy(char* buf, size_t n, size_t pos = 0) const;

		inline const char* c_str() const { return mBuf; }

		inline bool empty() const { return !*mBuf; }

		inline iterator end() { return iterator(mBuf + size()); }
		inline const_iterator end() const { return const_iterator(mBuf + size()); }

		inline size_t find(const string& str, size_t pos = 0) const { return find(str.mBuf, pos, str.size()); }
		inline size_t find(const char* str, size_t pos = 0) const { return find(str, pos, strlen(str)); }
		size_t find(const char* str, size_t pos, size_t n) const;
		size_t find(char c, size_t pos = 0) const;

		inline size_t length() const { return size(); }

		inline size_t max_size() const { return 0xFFFFFFFF; }

		inline reverse_iterator rbegin() { return reverse_iterator(end()); }
		inline const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }

		inline reverse_iterator rend() { return reverse_iterator(begin()); }
		inline const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }

		void reserve(size_t size = 0);

		inline void resize(size_t n) { resize(n, 0); }
		void resize(size_t n, char c);

		inline size_t size() const { return strlen(mBuf); }

		inline string substr(size_t pos = 0, size_t n = npos) const { return string(*this, pos, n); }

		void swap(string& str);
	};

#define _MAKE_OPERATOR_PLUS(lhs_type, rhs_type, lhs_size, rhs_size) \
	inline string operator +(lhs_type lhs, rhs_type rhs) \
	{ \
		string ret(lhs_size + rhs_size); \
		ret = lhs; \
		ret += rhs; \
		return ret; \
	}

	_MAKE_OPERATOR_PLUS(const string&, const string&, lhs.size(), rhs.size());
	_MAKE_OPERATOR_PLUS(const char*, const string&, strlen(lhs), rhs.size());
	_MAKE_OPERATOR_PLUS(char, const string&, 1, rhs.size());
	_MAKE_OPERATOR_PLUS(const string&, const char*, lhs.size(), strlen(rhs));
	_MAKE_OPERATOR_PLUS(const string&, char, lhs.size(), 1);
#undef _MAKE_OPERATOR_PLUS

#define _MAKE_REL_OP(op, ap) \
	inline bool operator op(const string& lhs, const string& rhs) { return lhs.compare(rhs) op 0; } \
	inline bool operator op(const string& lhs, const char* rhs)   { return lhs.compare(rhs) op 0; } \
	inline bool operator op(const char* lhs, const string& rhs)   { return rhs.compare(lhs) ap 0; }

	_MAKE_REL_OP(==, ==);
	_MAKE_REL_OP(!=, !=);
	_MAKE_REL_OP(<, >);
	_MAKE_REL_OP(>, <);
	_MAKE_REL_OP(<=, >=);
	_MAKE_REL_OP(>=, <=);
#undef _MAKE_REL_OP

	inline void swap (string& lhs, string& rhs)
	{
		lhs.swap(rhs);
	}
}

#ifdef BUILD_FEOSSTL
#pragma GCC visibility pop
#endif
